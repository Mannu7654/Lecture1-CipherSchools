
//                         Cycle Detection in Unidirectional Graph : -- Part 1

//  It is done by using DFS implementation.
// Flood Fill algorithms :-- Flood fill is an algorithm mainly used to determine a bounded area connected to a given node in a multi-dimensional array.

#include<bits/stdc++.h>
using namespace std;

bool have_cycle(vector<vector<int>>&g,int src,int v,int p, vector<bool>&vis){
	vis[src] =1;
	
	cout<<"in have cycle"<<endl;
	
	for(int i=0;i<v;i++){
		if(g[src][i] ==1){
			if(vis[i] && i!=p)return 1;
			if(have_cycle(g,i,v,src,vis))return 1;
		}
	}
	
	return 0;
}


void operate(vector<vector<int>>&g, int v){
	vector<bool>vis(v,0);
	
	bool f=0;
	for(int i=0;i<v;i++){
		id(!vis[i]){
			if(have_cycle(g,i,v,-1)){
				f=1;
				cout<<"Have Cycle"<<endl;
				break;
			}
		}
	}
	
	if(!f){
		cout<<"Cycle not present !"<<endl;
	}

	return;
}

int main(){
	int v,e;   // v-> vertices e-> edges
	cin>>v>>e;
	
	vector<vector<int>>g(v,vector<int>(v.0));
	
	for(int i=0;i<e;i++)
	{
		int f,s;   //  adjecent vertices f-> first node s-> source nodes
		cin>>f>>s;
		
		g[f][s]=1;
		g[s][f]=1;
	}
	
	operate(g,v);
	return 0;
}

