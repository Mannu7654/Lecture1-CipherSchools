/*
//  Inheritance in C++

                                            Theory of Inheritance
 
  Inheritance: -- The capability of a class to derive properties and characteristics from another class.
                  It having Base class(Parents) and derived class(child)
  Advantages: --  Code Resuability and redundancy, Reducing the time

                                 
//  Single  Inheritance

class A{
};
class B: public A{
};

// Multiple Inheritance

class A{
};
class B{
};
class C: public A, public B{
};

// Multilevel Inheritance

class A{
};
class B: public A{
};
class c: public B{
};

// Herichal Inheritance

class A{
};
class B: public A{
};
class C: public A{
};

// Hybrid Inheritance

class A{
};
class B{
};
class C: public A, public B{
};
class D: public C{
};
class E: public C{
};

*/


/*

//   Single Inheritance  Program and concept of access specifier

#include<bits/stdc++.h>
using namespace std;

class A{
	int a;
	protected:
		int b;
	public:
		int c;
};

// protected having more power as public modifier.
//  private having more power than protected from restraction

class B: public A{
	public:
		
};

int main()
{
	A obj;
	B obj1;
	
	cout<<obj1.a<" "<<obj1.b<<" "<<obj1.c<<endl;
	
//	cout<<obj.a<" "<<obj.b<<" "<<obj.c<<endl;
}

*/


/*
//  Overriding function using inheritance

#include<bits/stdc++.h>
using namespace std;

class Animal{
	public:
		void speak(){
			cout<<"they made a sound !"<<endl;
		}
};

class Dog: public Animal{
	public:
	void speak(){
		cout<<"woofff bhavv grrrr"<<endl;
	}	
};

class Cat: public Animal{
	public:
		void speak(){
			cout<<"Meowwwwww"<<endl;
		}
		
};

int main()
{
	Dog d;
	Animal a;
	Cat c;
	
	a.speak();
	d.speak();
	c.Animal::speak();  //  
}

*/


/// Order of Access of constructor and diestructor


//  1st called: - constructor of A
//  2nd         - constructor Of B
//  3rd         - destructor of B
//  4th         - destructor of A

#include<bits/stdc++.h>
using namespace std;

class A{
	public:
	//	int c;
	A()
	{
		cout<<"A's const"<<endl;
	}
	
	~A(){
		cout<<"A's dest."<<endl;
	}
};


class B: public A{
	public:
	B()
	{
		cout<<"B's const"<<endl;
	}
	
	~B(){
		cout<<"B's dest."<<endl;
	}	
};

int main()
{
	B obj;
//	A obj1;
	
	return 0;
}

